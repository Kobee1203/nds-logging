/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.logging.impl;import java.io.InputStream;import java.io.Serializable;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.security.AccessController;import java.security.PrivilegedAction;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Properties;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogConfigurationException;/** <p> Simple implementation of Log that sends all enabled log messages, for all defined loggers, to System.err. The following system properties are supported to configure the behavior of this logger: </p> <ul> <li><code>org.apache.commons.logging.simplelog.defaultlog</code> - Default logging detail level for all instances of SimpleLog. Must be one of ("trace", "debug", "info", "warn", "error", or "fatal"). If not specified, defaults to "info".</li> <li><code>org.apache.commons.logging.simplelog.log.xxxxx</code> - Logging detail level for a SimpleLog instance named "xxxxx". Must be one of ("trace", "debug", "info", "warn", "error", or "fatal"). If not specified, the default logging detail level is used.</li> <li><code>org.apache.commons.logging.simplelog.showlogname</code> - Set to <code>true</code> if you want the Log instance name to be included in output messages. Defaults to <code>false</code>.</li> <li><code>org.apache.commons.logging.simplelog.showShortLogname</code> - Set to * <code>true</code> if you want the last component of the name to be included in output messages. Defaults to <code>true</code>.</li> <li><code>org.apache.commons.logging.simplelog.showdatetime</code> - Set to <code>true</code> if you want the current date and time to be included in output messages. Default is <code>false</code>.</li> <li><code>org.apache.commons.logging.simplelog.dateTimeFormat</code> - The date and time format to be used in the output messages. The pattern describing the date and time format is the same that is used in <code>java.text.SimpleDateFormat</code>. If the format is not specified or is invalid, the default format is used. The default format is <code>yyyy/MM/dd HH:mm:ss:SSS zzz</code>.</li> </ul> *  * <p> In addition to looking for system properties with the names specified above, this implementation also checks for a class loader resource named <code>"simplelog.properties"</code>, and includes any matching definitions from this resource (if it exists). </p> *  * @author <a href="mailto:sanders@apache.org">Scott Sanders</a> * @author Rod Waldhoff * @author Robert Burrell Donkin *  * @version $Id: SimpleLog.java 581090 2007-10-01 22:01:06Z dennisl $ */public class SimpleLog implements Log,Serializable{static protected final String systemPrefix="org.apache.commons.logging.simplelog.";static protected final Properties simpleLogProps=new Properties();static protected final String DEFAULT_DATE_TIME_FORMAT="yyyy/MM/dd HH:mm:ss:SSS zzz";static protected boolean showLogName=false;static protected boolean showShortName=true;static protected boolean showDateTime=false;static protected String dateTimeFormat=DEFAULT_DATE_TIME_FORMAT;static protected DateFormat dateFormatter=null;public static final int LOG_LEVEL_TRACE=1;public static final int LOG_LEVEL_DEBUG=2;public static final int LOG_LEVEL_INFO=3;public static final int LOG_LEVEL_WARN=4;public static final int LOG_LEVEL_ERROR=5;public static final int LOG_LEVEL_FATAL=6;public static final int LOG_LEVEL_ALL=(LOG_LEVEL_TRACE-1);public static final int LOG_LEVEL_OFF=(LOG_LEVEL_FATAL+1);private static String getStringProperty(String name){String prop=null;try{prop=System.getProperty(name);}catch(SecurityException e){;}return (prop==null)?simpleLogProps.getProperty(name):prop;}private static String getStringProperty(String name,String dephault){String prop=getStringProperty(name);return (prop==null)?dephault:prop;}private static boolean getBooleanProperty(String name,boolean dephault){String prop=getStringProperty(name);return (prop==null)?dephault:"true".equalsIgnoreCase(prop);}static{InputStream in=getResourceAsStream("simplelog.properties");if(null!=in){try{simpleLogProps.load(in);in.close();}catch(java.io.IOException e){}}showLogName=getBooleanProperty(systemPrefix+"showlogname",showLogName);showShortName=getBooleanProperty(systemPrefix+"showShortLogname",showShortName);showDateTime=getBooleanProperty(systemPrefix+"showdatetime",showDateTime);if(showDateTime){dateTimeFormat=getStringProperty(systemPrefix+"dateTimeFormat",dateTimeFormat);try{dateFormatter=new SimpleDateFormat(dateTimeFormat);}catch(IllegalArgumentException e){dateTimeFormat=DEFAULT_DATE_TIME_FORMAT;dateFormatter=new SimpleDateFormat(dateTimeFormat);}}}protected String logName=null;protected int currentLogLevel;private String shortLogName=null;public SimpleLog(String name){logName=name;setLevel(SimpleLog.LOG_LEVEL_INFO);String lvl=getStringProperty(systemPrefix+"log."+logName);int i=String.valueOf(name).lastIndexOf(".");while(null==lvl&&i>-1){name=name.substring(0,i);lvl=getStringProperty(systemPrefix+"log."+name);i=String.valueOf(name).lastIndexOf(".");}if(null==lvl){lvl=getStringProperty(systemPrefix+"defaultlog");}if("all".equalsIgnoreCase(lvl)){setLevel(SimpleLog.LOG_LEVEL_ALL);}else if("trace".equalsIgnoreCase(lvl)){setLevel(SimpleLog.LOG_LEVEL_TRACE);}else if("debug".equalsIgnoreCase(lvl)){setLevel(SimpleLog.LOG_LEVEL_DEBUG);}else if("info".equalsIgnoreCase(lvl)){setLevel(SimpleLog.LOG_LEVEL_INFO);}else if("warn".equalsIgnoreCase(lvl)){setLevel(SimpleLog.LOG_LEVEL_WARN);}else if("error".equalsIgnoreCase(lvl)){setLevel(SimpleLog.LOG_LEVEL_ERROR);}else if("fatal".equalsIgnoreCase(lvl)){setLevel(SimpleLog.LOG_LEVEL_FATAL);}else if("off".equalsIgnoreCase(lvl)){setLevel(SimpleLog.LOG_LEVEL_OFF);}}public void setLevel(int currentLogLevel){this.currentLogLevel=currentLogLevel;}public int getLevel(){return currentLogLevel;}protected void log(int type,Object message,Throwable t){StringBuffer buf=new StringBuffer();if(showDateTime){Date now=new Date();String dateText;synchronized(dateFormatter){dateText=dateFormatter.format(now);}buf.append(dateText);buf.append(" ");}switch(type){case SimpleLog.LOG_LEVEL_TRACE:buf.append("[TRACE] ");break;case SimpleLog.LOG_LEVEL_DEBUG:buf.append("[DEBUG] ");break;case SimpleLog.LOG_LEVEL_INFO:buf.append("[INFO] ");break;case SimpleLog.LOG_LEVEL_WARN:buf.append("[WARN] ");break;case SimpleLog.LOG_LEVEL_ERROR:buf.append("[ERROR] ");break;case SimpleLog.LOG_LEVEL_FATAL:buf.append("[FATAL] ");break;}if(showShortName){if(shortLogName==null){shortLogName=logName.substring(logName.lastIndexOf(".")+1);shortLogName=shortLogName.substring(shortLogName.lastIndexOf("/")+1);}buf.append(String.valueOf(shortLogName)).append(" - ");}else if(showLogName){buf.append(String.valueOf(logName)).append(" - ");}buf.append(String.valueOf(message));if(t!=null){buf.append(" <");buf.append(t.toString());buf.append(">");java.io.StringWriter sw=new java.io.StringWriter(1024);java.io.PrintWriter pw=new java.io.PrintWriter(sw);t.printStackTrace(pw);pw.close();buf.append(sw.toString());}write(buf);}protected void write(StringBuffer buffer){System.err.println(buffer.toString());}protected boolean isLevelEnabled(int logLevel){return(logLevel>=currentLogLevel);}public final void debug(Object message){if(isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)){log(SimpleLog.LOG_LEVEL_DEBUG,message,null);}}public final void debug(Object message,Throwable t){if(isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)){log(SimpleLog.LOG_LEVEL_DEBUG,message,t);}}public final void trace(Object message){if(isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)){log(SimpleLog.LOG_LEVEL_TRACE,message,null);}}public final void trace(Object message,Throwable t){if(isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)){log(SimpleLog.LOG_LEVEL_TRACE,message,t);}}public final void info(Object message){if(isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)){log(SimpleLog.LOG_LEVEL_INFO,message,null);}}public final void info(Object message,Throwable t){if(isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)){log(SimpleLog.LOG_LEVEL_INFO,message,t);}}public final void warn(Object message){if(isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)){log(SimpleLog.LOG_LEVEL_WARN,message,null);}}public final void warn(Object message,Throwable t){if(isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)){log(SimpleLog.LOG_LEVEL_WARN,message,t);}}public final void error(Object message){if(isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)){log(SimpleLog.LOG_LEVEL_ERROR,message,null);}}public final void error(Object message,Throwable t){if(isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)){log(SimpleLog.LOG_LEVEL_ERROR,message,t);}}public final void fatal(Object message){if(isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)){log(SimpleLog.LOG_LEVEL_FATAL,message,null);}}public final void fatal(Object message,Throwable t){if(isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)){log(SimpleLog.LOG_LEVEL_FATAL,message,t);}}public final boolean isDebugEnabled(){return isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG);}public final boolean isErrorEnabled(){return isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR);}public final boolean isFatalEnabled(){return isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL);}public final boolean isInfoEnabled(){return isLevelEnabled(SimpleLog.LOG_LEVEL_INFO);}public final boolean isTraceEnabled(){return isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE);}public final boolean isWarnEnabled(){return isLevelEnabled(SimpleLog.LOG_LEVEL_WARN);}private static ClassLoader getContextClassLoader(){ClassLoader classLoader=null;if(classLoader==null){try{Method method=Thread.class.getMethod("getContextClassLoader",(Class[])null);try{classLoader=(ClassLoader)method.invoke(Thread.currentThread(),(Class[])null);}catch(IllegalAccessException e){;}catch(InvocationTargetException e){if(e.getTargetException() instanceof SecurityException){;}else{throw new LogConfigurationException("Unexpected InvocationTargetException",e.getTargetException());}}}catch(NoSuchMethodException e){;}}if(classLoader==null){classLoader=SimpleLog.class.getClassLoader();}return classLoader;}private static InputStream getResourceAsStream(final String name){return (InputStream)AccessController.doPrivileged(new PrivilegedAction(){public Object run(){ClassLoader threadCL=getContextClassLoader();if(threadCL!=null){return threadCL.getResourceAsStream(name);}else{return ClassLoader.getSystemResourceAsStream(name);}}});}}